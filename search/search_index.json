{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentaci\u00f3n de las tareas de la asignatura Entornos de Desarrollo En esta p\u00e1gina web est\u00e1tica podr\u00e1s encontrar las tareas realizadas durante el curso. Secciones Ciclo de vida del software Lenguajes de programaci\u00f3n Herramientas de desarrollo Entornos integrados de desarrollo Kanban, Scrum y XP Control de versiones","title":"Documentaci\u00f3n de las tareas de la asignatura Entornos de Desarrollo"},{"location":"#documentacion-de-las-tareas-de-la-asignatura-entornos-de-desarrollo","text":"En esta p\u00e1gina web est\u00e1tica podr\u00e1s encontrar las tareas realizadas durante el curso.","title":"Documentaci\u00f3n de las tareas de la asignatura Entornos de Desarrollo"},{"location":"#secciones","text":"Ciclo de vida del software Lenguajes de programaci\u00f3n Herramientas de desarrollo Entornos integrados de desarrollo Kanban, Scrum y XP Control de versiones","title":"Secciones"},{"location":"Ciclo%20de%20vida%20del%20software/","text":"CICLO DE VIDA DEL SOFTWARE 1) Define \"Ciclo de vida del software\" Se define ciclo de vida del software a la estructura que contiene los procesos, las actividades y las tareas relacionadas con el desarrollo y mantenimiento de un producto software, abarcando la vida completa de dicho sistema. 2) Nombra las fases principales del desarrollo de software y explica brevemente que se hace en cada una de ellas. An\u00e1lisis - Se define las necesidades del cliente y se especifican los requisitos del software a desarrollar. Dise\u00f1o - Se descompone y organiza el sistema en componentes que pueden ser desarrollados por separado. Codificaci\u00f3n - Se escribe el c\u00f3digo fuente de cada componente. Pruebas - Someter el programa al m\u00e1ximo n\u00famero de situaciones diferentes para conseguir que el programa funcione incorrectamente y que se descubran defectos. Mantenimiento - Cambios ocasionales realizados en el sistema software. 3) Ventajas e inconvenientes del modelo en cascada. Ventajas: Identifica las fases principales del desarrollo de software. El resultado de una fase es la entrada de la siguiente. Variedad con mayor o menor cantidad de actividades Desventajas: Modelo bastante r\u00edgido que se adapta mal al cambio de especificaciones. Puede retrasar ciertas fases ya que hay que seguir un orden indicado. 4) \u00bfQu\u00e9 se entiende por verificaci\u00f3n? \u00bfY por validaci\u00f3n? Verificar: Proceso para demostrar que el producto funciona correctamente. Validar: Proceso para demostrar que el sistema cumple con las funciones para las que fue dise\u00f1ado. 5) Explica como funciona el modelo de desarrollo mediante creaci\u00f3n de prototipos. Durante la fase de an\u00e1lisis se crea un prototipo del producto para que sea probado por el usuario o cliente y se repite este paso las veces que hagan falta. 6) Explica como funciona el modelo espiral cuando se aplica al desarrollo orientado a objetos. En el modelo espiral se siguen los siguientes pasos cuando se aplica a la programaci\u00f3n orientada a objetos: -Se identifican las clases candidatas. -Se buscan las clases en biblioteca. -Se extraen las clases en caso de existir. -Se desarrollan las clases si no existen. -Se a\u00f1aden las nuevas clases a la biblioteca. -Se construye la iteraci\u00f3n correspondiente.","title":"Ciclo de vida del software"},{"location":"Ciclo%20de%20vida%20del%20software/#ciclo-de-vida-del-software","text":"","title":"CICLO DE VIDA DEL SOFTWARE"},{"location":"Ciclo%20de%20vida%20del%20software/#1-define-ciclo-de-vida-del-software","text":"Se define ciclo de vida del software a la estructura que contiene los procesos, las actividades y las tareas relacionadas con el desarrollo y mantenimiento de un producto software, abarcando la vida completa de dicho sistema.","title":"1) Define \"Ciclo de vida del software\""},{"location":"Ciclo%20de%20vida%20del%20software/#2-nombra-las-fases-principales-del-desarrollo-de-software-y-explica-brevemente-que-se-hace-en-cada-una-de-ellas","text":"An\u00e1lisis - Se define las necesidades del cliente y se especifican los requisitos del software a desarrollar. Dise\u00f1o - Se descompone y organiza el sistema en componentes que pueden ser desarrollados por separado. Codificaci\u00f3n - Se escribe el c\u00f3digo fuente de cada componente. Pruebas - Someter el programa al m\u00e1ximo n\u00famero de situaciones diferentes para conseguir que el programa funcione incorrectamente y que se descubran defectos. Mantenimiento - Cambios ocasionales realizados en el sistema software.","title":"2) Nombra las fases principales del desarrollo de software y explica brevemente que se hace en cada una de ellas."},{"location":"Ciclo%20de%20vida%20del%20software/#3-ventajas-e-inconvenientes-del-modelo-en-cascada","text":"Ventajas: Identifica las fases principales del desarrollo de software. El resultado de una fase es la entrada de la siguiente. Variedad con mayor o menor cantidad de actividades Desventajas: Modelo bastante r\u00edgido que se adapta mal al cambio de especificaciones. Puede retrasar ciertas fases ya que hay que seguir un orden indicado.","title":"3) Ventajas e inconvenientes del modelo en cascada."},{"location":"Ciclo%20de%20vida%20del%20software/#4-que-se-entiende-por-verificacion-y-por-validacion","text":"Verificar: Proceso para demostrar que el producto funciona correctamente. Validar: Proceso para demostrar que el sistema cumple con las funciones para las que fue dise\u00f1ado.","title":"4) \u00bfQu\u00e9 se entiende por verificaci\u00f3n? \u00bfY por validaci\u00f3n?"},{"location":"Ciclo%20de%20vida%20del%20software/#5-explica-como-funciona-el-modelo-de-desarrollo-mediante-creacion-de-prototipos","text":"Durante la fase de an\u00e1lisis se crea un prototipo del producto para que sea probado por el usuario o cliente y se repite este paso las veces que hagan falta.","title":"5) Explica como funciona el modelo de desarrollo mediante creaci\u00f3n de prototipos."},{"location":"Ciclo%20de%20vida%20del%20software/#6-explica-como-funciona-el-modelo-espiral-cuando-se-aplica-al-desarrollo-orientado-a-objetos","text":"En el modelo espiral se siguen los siguientes pasos cuando se aplica a la programaci\u00f3n orientada a objetos: -Se identifican las clases candidatas. -Se buscan las clases en biblioteca. -Se extraen las clases en caso de existir. -Se desarrollan las clases si no existen. -Se a\u00f1aden las nuevas clases a la biblioteca. -Se construye la iteraci\u00f3n correspondiente.","title":"6) Explica como funciona el modelo espiral cuando se aplica al desarrollo orientado a objetos."},{"location":"Control%20de%20versiones/","text":"CONTROL DE VERSIONES 1) Adem\u00e1s de Git, \u00bfque otros sistemas de control de versiones existen? Existen: GitHub BitBucket GitLab Coding -en chino- 2) En Git, \u00bfqu\u00e9 tres \u00e1reas existen? Existen el \u201cworking directory\u201d, \u201cstaging area\u201d y el \u201crepository\u201d. 3) Busca en Internet un buen tutorial de GIT y real\u00edzalo. \u00bfDe qu\u00e9 tutorial se trata? https://www.w3schools.com/git/default.asp?remote=github 4) Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo. https://www.youtube.com/watch?v=uR6G2v_WsRA 5) En Git, \u00bfpara qu\u00e9 sirve el comando git config? Para definir valores de configuraci\u00f3n de Git. 6) En Git, \u00bfpara qu\u00e9 sirve el comando git init? Para crear un nuevo repositorio de Git. 7) En Git, \u00bfpara qu\u00e9 sirve el comando git clone? Para seleccionar un repositorio y clonarlo en una nueva ubicaci\u00f3n. 8) En Git, \u00bfpara qu\u00e9 sirve el comando git status? Para mostrar los archivos modificados del working directory, almacenados para el pr\u00f3ximo commit. 9) En Git, \u00bfpara qu\u00e9 sirve el comando git add? Para a\u00f1adir un archivo en el estado actual al stage area. 10) En Git, \u00bfpara qu\u00e9 sirve el comando git commit? Env\u00eda el contenido del stage area a un nuevo commit. 11) En Git, \u00bfpara qu\u00e9 sirve el comando git log? Muestra el historial de todos los commit de la rama actual del proyecto. 12) En Git, \u00bfpara qu\u00e9 sirve el comando git reset HEAD nombrearchivo? Sirve para sacar el archivo seleccionado del \u201cstaging area\u201d. 13) En Git, \u00bfpara qu\u00e9 sirve el comando git checkout -- nombrearchivo? Te permite restaurar archivos modificados o eliminados. 14) Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo. https://www.youtube.com/watch?v=FyAAIHHClqI 15) En Git, \u00bfpara qu\u00e9 sirve el comando git branch? Sirve para mostrar una lista de todas tus ramas (branches). 16) En Git, \u00bfpara qu\u00e9 sirve el comando git checkout? Cambia a una rama diferente y se actualizan los archivos en el working directory. 17) En Git, \u00bfpara qu\u00e9 sirve el comando git merge? Une la rama especificada en la rama actual. 18) En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo fast-forward. El merge es un comando que permite unificar varias ramas del proyecto, en este caso, el tipo fast-forward se refiere a la uni\u00f3n de la rama master de un proyecto con los cambios realizados en una rama \u201cfeature, siempre y cuando el proyecto siga un camino lineal y pertenezcan a la misma rama. Esto no funciona si las ramas se dividen y no se puede usar el tipo fast forward para unificar el commit. 19) En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo 3-way. El merge de tipo 3-way es una fusi\u00f3n de los cambios realizados en la rama master con los cambios realizados en la rama feature, siempre y cuando la rama del main sea diferente a la rama feature. Si ambas ramas que quieres unir tiene las mismas partes de los mismos archivos cambiadas se forma un conflicto, en este caso el proceso se pausar\u00eda antes del commit para poder resolver el problema.","title":"Control de versiones"},{"location":"Control%20de%20versiones/#control-de-versiones","text":"","title":"CONTROL DE VERSIONES"},{"location":"Control%20de%20versiones/#1-ademas-de-git-que-otros-sistemas-de-control-de-versiones-existen","text":"Existen: GitHub BitBucket GitLab Coding -en chino-","title":"1) Adem\u00e1s de Git, \u00bfque otros sistemas de control de versiones existen?"},{"location":"Control%20de%20versiones/#2-en-git-que-tres-areas-existen","text":"Existen el \u201cworking directory\u201d, \u201cstaging area\u201d y el \u201crepository\u201d.","title":"2) En Git, \u00bfqu\u00e9 tres \u00e1reas existen?"},{"location":"Control%20de%20versiones/#3-busca-en-internet-un-buen-tutorial-de-git-y-realizalo-de-que-tutorial-se-trata","text":"https://www.w3schools.com/git/default.asp?remote=github","title":"3) Busca en Internet un buen tutorial de GIT y real\u00edzalo. \u00bfDe qu\u00e9 tutorial se trata?"},{"location":"Control%20de%20versiones/#4-visualiza-el-siguiente-video-y-responde-a-las-cuestiones-que-aparecen-mas-abajo","text":"https://www.youtube.com/watch?v=uR6G2v_WsRA","title":"4) Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo."},{"location":"Control%20de%20versiones/#5-en-git-para-que-sirve-el-comando-git-config","text":"Para definir valores de configuraci\u00f3n de Git.","title":"5) En Git, \u00bfpara qu\u00e9 sirve el comando git config?"},{"location":"Control%20de%20versiones/#6-en-git-para-que-sirve-el-comando-git-init","text":"Para crear un nuevo repositorio de Git.","title":"6) En Git, \u00bfpara qu\u00e9 sirve el comando git init?"},{"location":"Control%20de%20versiones/#7-en-git-para-que-sirve-el-comando-git-clone","text":"Para seleccionar un repositorio y clonarlo en una nueva ubicaci\u00f3n.","title":"7) En Git, \u00bfpara qu\u00e9 sirve el comando git clone?"},{"location":"Control%20de%20versiones/#8-en-git-para-que-sirve-el-comando-git-status","text":"Para mostrar los archivos modificados del working directory, almacenados para el pr\u00f3ximo commit.","title":"8) En Git, \u00bfpara qu\u00e9 sirve el comando git status?"},{"location":"Control%20de%20versiones/#9-en-git-para-que-sirve-el-comando-git-add","text":"Para a\u00f1adir un archivo en el estado actual al stage area.","title":"9) En Git, \u00bfpara qu\u00e9 sirve el comando git add?"},{"location":"Control%20de%20versiones/#10-en-git-para-que-sirve-el-comando-git-commit","text":"Env\u00eda el contenido del stage area a un nuevo commit.","title":"10) En Git, \u00bfpara qu\u00e9 sirve el comando git commit?"},{"location":"Control%20de%20versiones/#11-en-git-para-que-sirve-el-comando-git-log","text":"Muestra el historial de todos los commit de la rama actual del proyecto.","title":"11) En Git, \u00bfpara qu\u00e9 sirve el comando git log?"},{"location":"Control%20de%20versiones/#12-en-git-para-que-sirve-el-comando-git-reset-head-nombrearchivo","text":"Sirve para sacar el archivo seleccionado del \u201cstaging area\u201d.","title":"12) En Git, \u00bfpara qu\u00e9 sirve el comando git reset HEAD nombrearchivo?"},{"location":"Control%20de%20versiones/#13-en-git-para-que-sirve-el-comando-git-checkout-nombrearchivo","text":"Te permite restaurar archivos modificados o eliminados.","title":"13) En Git, \u00bfpara qu\u00e9 sirve el comando git checkout -- nombrearchivo?"},{"location":"Control%20de%20versiones/#14-visualiza-el-siguiente-video-y-responde-a-las-cuestiones-que-aparecen-mas-abajo","text":"https://www.youtube.com/watch?v=FyAAIHHClqI","title":"14) Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo."},{"location":"Control%20de%20versiones/#15-en-git-para-que-sirve-el-comando-git-branch","text":"Sirve para mostrar una lista de todas tus ramas (branches).","title":"15) En Git, \u00bfpara qu\u00e9 sirve el comando git branch?"},{"location":"Control%20de%20versiones/#16-en-git-para-que-sirve-el-comando-git-checkout","text":"Cambia a una rama diferente y se actualizan los archivos en el working directory.","title":"16) En Git, \u00bfpara qu\u00e9 sirve el comando git checkout?"},{"location":"Control%20de%20versiones/#17-en-git-para-que-sirve-el-comando-git-merge","text":"Une la rama especificada en la rama actual.","title":"17) En Git, \u00bfpara qu\u00e9 sirve el comando git merge?"},{"location":"Control%20de%20versiones/#18-en-git-explica-como-funciona-la-fusion-merge-de-tipo-fast-forward","text":"El merge es un comando que permite unificar varias ramas del proyecto, en este caso, el tipo fast-forward se refiere a la uni\u00f3n de la rama master de un proyecto con los cambios realizados en una rama \u201cfeature, siempre y cuando el proyecto siga un camino lineal y pertenezcan a la misma rama. Esto no funciona si las ramas se dividen y no se puede usar el tipo fast forward para unificar el commit.","title":"18) En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo fast-forward."},{"location":"Control%20de%20versiones/#19-en-git-explica-como-funciona-la-fusion-merge-de-tipo-3-way","text":"El merge de tipo 3-way es una fusi\u00f3n de los cambios realizados en la rama master con los cambios realizados en la rama feature, siempre y cuando la rama del main sea diferente a la rama feature. Si ambas ramas que quieres unir tiene las mismas partes de los mismos archivos cambiadas se forma un conflicto, en este caso el proceso se pausar\u00eda antes del commit para poder resolver el problema.","title":"19) En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo 3-way."},{"location":"Entornos%20integrados%20de%20desarrollo/","text":"Entornos integrados de desarrollo 1) Instala el editor sublime text. Saca una captura de pantalla una vez instalado. 2) Personaliza Sublime text instalando los complementos m\u00e1s importantes. Consulta la p\u00e1gina https://www.genbetadev.com/desarrollo-web/10-packages-de-sublimetext-para-desarrolladores-web Emmet SideBarEnhancements HTML-CSS-JS Prettify Color Highlighter BracketHighlighter HTML5 Terminal JavaScriptNext ES6 PackageDev 3) \u00bfPara que sirve el complemento Emmet? Haz uso de \u00e9l al escribir un archivo html de prueba. Sirve para agilizar el proceso de escribir c\u00f3digo. Aqui un ejemplo de escribir parte de una tabla en HTML con emmet: 4) Instala el editor Visual Studio Code. Saca una captura de pantalla una vez instalado y funcionando. 5) Haz una comparativa de la funcionalidad ofrecida por Sublime text y la ofrecida por Visual Studio Code referente a los siguientes aspectos: 1. terminal integrado Sublime Text no tiene un terminal incluido al instalarlo, mientras que Visual Studio Code lo trae incluido. 2. emmet incorporado Emmet est\u00e1 incluido en Visual Studio Code por lo que no es necesario instalar ninguna extensi\u00f3n, a diferencia de Sublime Text que se tiene que instalar a trav\u00e9s del Package Control. 3. iconos para los tipos de archivos Sublime Text no tiene una diferencia visual en los iconos para los archivos, a no ser que se descargue un paquete que los a\u00f1ada, mientras que Visual Studio muestra los iconos del lenguaje de programaci\u00f3n en uso en la barra de arribe del c\u00f3digo. 4. atajo de teclas para comentar (Ctrl+Shift+7) En Visual Studio el atajo para comentar es Ctrl + K + C, mientras que en Sublime Text se puede asignar como dice en el enunciado a Ctrl + Shift + 7 5. atajo de teclas para buscar y seleccionar (Ctrl+D) En Visual Studio con Ctrl + D se abre el cuadro de b\u00fasqueda, mientras que en Sublime Text Ctrl + D es para seleccionar y Ctrl + F para encontrar 6) \u00bfQu\u00e9 paquetes b\u00e1sicos debemos instalar en Ubuntu para desarrollar en Java? OpenJDK y el IDE,como por ejemplo, Eclipse. 7) Instala el entorno integrado Netbeans. Saca una captura de pantalla una vez instalado y funcionando. 9) Crea un proyecto en Java en Netbeans. Realiza su compilaci\u00f3n y ejecuci\u00f3n. 10) \u00bfQu\u00e9 sistema de construcci\u00f3n utiliza Netbeans para generar los archivos \"ejecutables\"? Mira en el directorio ra\u00edz del proyecto y examina qu\u00e9 buildfile utiliza de los vistos en el tema. Maven.","title":"Entornos integrados de desarrollo"},{"location":"Entornos%20integrados%20de%20desarrollo/#entornos-integrados-de-desarrollo","text":"","title":"Entornos integrados de desarrollo"},{"location":"Entornos%20integrados%20de%20desarrollo/#1-instala-el-editor-sublime-text-saca-una-captura-de-pantalla-una-vez-instalado","text":"","title":"1) Instala el editor sublime text. Saca una captura de pantalla una vez instalado."},{"location":"Entornos%20integrados%20de%20desarrollo/#2-personaliza-sublime-text-instalando-los-complementos-mas-importantes","text":"Consulta la p\u00e1gina https://www.genbetadev.com/desarrollo-web/10-packages-de-sublimetext-para-desarrolladores-web Emmet SideBarEnhancements HTML-CSS-JS Prettify Color Highlighter BracketHighlighter HTML5 Terminal JavaScriptNext ES6 PackageDev","title":"2) Personaliza Sublime text instalando los complementos m\u00e1s importantes."},{"location":"Entornos%20integrados%20de%20desarrollo/#3-para-que-sirve-el-complemento-emmet-haz-uso-de-el-al-escribir-un-archivo-html-de-prueba","text":"Sirve para agilizar el proceso de escribir c\u00f3digo. Aqui un ejemplo de escribir parte de una tabla en HTML con emmet:","title":"3) \u00bfPara que sirve el complemento Emmet? Haz uso de \u00e9l al escribir un archivo html de prueba."},{"location":"Entornos%20integrados%20de%20desarrollo/#4-instala-el-editor-visual-studio-code-saca-una-captura-de-pantalla-una-vez-instalado-y-funcionando","text":"","title":"4) Instala el editor Visual Studio Code. Saca una captura de pantalla una vez instalado y funcionando."},{"location":"Entornos%20integrados%20de%20desarrollo/#5-haz-una-comparativa-de-la-funcionalidad-ofrecida-por-sublime-text-y-la-ofrecida-por-visual-studio-code-referente-a-los-siguientes-aspectos","text":"1. terminal integrado Sublime Text no tiene un terminal incluido al instalarlo, mientras que Visual Studio Code lo trae incluido. 2. emmet incorporado Emmet est\u00e1 incluido en Visual Studio Code por lo que no es necesario instalar ninguna extensi\u00f3n, a diferencia de Sublime Text que se tiene que instalar a trav\u00e9s del Package Control. 3. iconos para los tipos de archivos Sublime Text no tiene una diferencia visual en los iconos para los archivos, a no ser que se descargue un paquete que los a\u00f1ada, mientras que Visual Studio muestra los iconos del lenguaje de programaci\u00f3n en uso en la barra de arribe del c\u00f3digo. 4. atajo de teclas para comentar (Ctrl+Shift+7) En Visual Studio el atajo para comentar es Ctrl + K + C, mientras que en Sublime Text se puede asignar como dice en el enunciado a Ctrl + Shift + 7 5. atajo de teclas para buscar y seleccionar (Ctrl+D) En Visual Studio con Ctrl + D se abre el cuadro de b\u00fasqueda, mientras que en Sublime Text Ctrl + D es para seleccionar y Ctrl + F para encontrar","title":"5) Haz una comparativa de la funcionalidad ofrecida por Sublime text y la ofrecida por Visual Studio Code referente a los siguientes aspectos:"},{"location":"Entornos%20integrados%20de%20desarrollo/#6-que-paquetes-basicos-debemos-instalar-en-ubuntu-para-desarrollar-en-java","text":"OpenJDK y el IDE,como por ejemplo, Eclipse.","title":"6) \u00bfQu\u00e9 paquetes b\u00e1sicos debemos instalar en Ubuntu para desarrollar en Java?"},{"location":"Entornos%20integrados%20de%20desarrollo/#7-instala-el-entorno-integrado-netbeans-saca-una-captura-de-pantalla-una-vez-instalado-y-funcionando","text":"","title":"7) Instala el entorno integrado Netbeans. Saca una captura de pantalla una vez instalado y funcionando."},{"location":"Entornos%20integrados%20de%20desarrollo/#9-crea-un-proyecto-en-java-en-netbeans-realiza-su-compilacion-y-ejecucion","text":"","title":"9) Crea un proyecto en Java en Netbeans. Realiza su compilaci\u00f3n y ejecuci\u00f3n."},{"location":"Entornos%20integrados%20de%20desarrollo/#10-que-sistema-de-construccion-utiliza-netbeans-para-generar-los-archivos-ejecutables-mira-en-el-directorio-raiz-del-proyecto-y-examina-que-buildfile-utiliza-de-los-vistos-en-el-tema","text":"Maven.","title":"10) \u00bfQu\u00e9 sistema de construcci\u00f3n utiliza Netbeans para generar los archivos \"ejecutables\"? Mira en el directorio ra\u00edz del proyecto y examina qu\u00e9 buildfile utiliza de los vistos en el tema."},{"location":"Herramientas%20de%20desarrollo/","text":"Herramientas de desarrollo 1) Ejecuta el programa \"Hola mundo\" en los siguientes lenguajes: bash python php javascript (nodejs) c c++ java ruby go rust lisp ensamblador (nasm) Los paquetes a instalar en Ubuntu son: python, php, nodejs, gcc, g++, openjdk-8-jdk, ruby, golang, rustc , clisp y nasm. El c\u00f3digo fuente para distintos lenguajes de programaci\u00f3n est\u00e1 disponible en: https://es.wikipedia.org/wiki/Anexo:Ejemplos_de_implementaci%C3%B3n_del_%C2%ABHola_mundo%C2%BB Instrucciones en https://github.com/jamj2000/DAW1-ED-HolaMundo. 2) Para cada uno de los lenguajes anteriores, indica el proceso realizado para conseguir ejecutar el c\u00f3digo: \u00bfcompilaci\u00f3n o interpretaci\u00f3n? bash: Interpretaci\u00f3n python: Interpretaci\u00f3n php: Interpretaci\u00f3n javascript (nodejs): Interpretaci\u00f3n c: Compilaci\u00f3n c++: Compilaci\u00f3n java: Compilaci\u00f3n ruby: Interpretaci\u00f3n go: Compilaci\u00f3n rust: Compilaci\u00f3n lisp: Interpretaci\u00f3n ensamblador (nasm): Compilaci\u00f3n 3) Para cada uno de los lenguajes anteriores, indica el nombre del compilador o interprete utilizado en GNU/Linux. bash: Shell python: CPython php: Netbeans javascript (nodejs): Navegador web c: GCC c++: GCC java: GNU Compiler ruby: JIT go: gccgo rust: Rustc lisp: GCL ensamblador (nasm): GNU Assembler 4) Investiga y averigua que extensi\u00f3n tienen los archivos de c\u00f3digo fuente de los siguientes lenguajes: bash: .sh python: .py php: .php javascript (nodejs): .js c: .c c++: .cpp java: .java ruby: .rb go: .go rust: .rs lisp: .lisp ensamblador (nasm): .asm 6) \u00bfQu\u00e9 extensi\u00f3n tienen los archivos de c\u00f3digo objeto? Tienen la extensi\u00f3n .obj, que son archivos intermedios generados por el compilador. 7) Lenguaje C. C\u00f3digo en varios archivos. Obtener el c\u00f3digo objeto a partir del c\u00f3digo fuente de los 3 archivos siguientes: Escribimos en la consola el comando \"gcc -c main.c datos.c suma.c\" y si despu\u00e9s escribimos el comando \"ls\" para comprobar los archivos, adem\u00e1s de los del enunciado, nos devuelve main.o datos.o y suma.o 8) Lenguaje C. C\u00f3digo en varios archivos. Obtener el c\u00f3digo binario ejecutable a partir del c\u00f3digo objeto de los 3 archivos anteriores: Para obtener el c\u00f3digo binario ejecutable usaremos el comando \"gcc -o ejemplo main.o datos.o suma.o\" y nos devuelve un nuevo archivo llamado ejemplo con el c\u00f3digo binario ejecutable. BIBLIOTECAS 11) Bibliotecas. Define que se entiende por biblioteca o librer\u00eda y los tipos que existen. Es un conjunto de implementaciones funcionales codificadas en un lenguaje de programaci\u00f3n. Existen los siguientes tipos: - Bibliotecas est\u00e1ticas - Bibliotecas din\u00e1micas - Bibliotecas remotas 12) Bibliotecas. \u00bfQu\u00e9 tipo es el m\u00e1s utilizado actualmente? \u00bfPor qu\u00e9? Las bibliotecas din\u00e1micas porque la carga din\u00e1mica permite al sistema operativo aplicar algoritmos que mejoren el rendimiento del sistema cuando se carguen estas bibliotecas. Adem\u00e1s, al estar compartidas, basta con mantener una copia en memoria para todos los programas que la utilicen. En resumen, facilitan la gesti\u00f3n y el aprovechamiento de la memoria del sistema.","title":"Herramientas de desarrollo"},{"location":"Herramientas%20de%20desarrollo/#herramientas-de-desarrollo","text":"","title":"Herramientas de desarrollo"},{"location":"Herramientas%20de%20desarrollo/#1-ejecuta-el-programa-hola-mundo-en-los-siguientes-lenguajes","text":"bash python php javascript (nodejs) c c++ java ruby go rust lisp ensamblador (nasm) Los paquetes a instalar en Ubuntu son: python, php, nodejs, gcc, g++, openjdk-8-jdk, ruby, golang, rustc , clisp y nasm. El c\u00f3digo fuente para distintos lenguajes de programaci\u00f3n est\u00e1 disponible en: https://es.wikipedia.org/wiki/Anexo:Ejemplos_de_implementaci%C3%B3n_del_%C2%ABHola_mundo%C2%BB Instrucciones en https://github.com/jamj2000/DAW1-ED-HolaMundo.","title":"1) Ejecuta el programa \"Hola mundo\" en los siguientes lenguajes:"},{"location":"Herramientas%20de%20desarrollo/#2-para-cada-uno-de-los-lenguajes-anteriores-indica-el-proceso-realizado-para-conseguir-ejecutar-el-codigo-compilacion-o-interpretacion","text":"bash: Interpretaci\u00f3n python: Interpretaci\u00f3n php: Interpretaci\u00f3n javascript (nodejs): Interpretaci\u00f3n c: Compilaci\u00f3n c++: Compilaci\u00f3n java: Compilaci\u00f3n ruby: Interpretaci\u00f3n go: Compilaci\u00f3n rust: Compilaci\u00f3n lisp: Interpretaci\u00f3n ensamblador (nasm): Compilaci\u00f3n","title":"2) Para cada uno de los lenguajes anteriores, indica el proceso realizado para conseguir ejecutar el c\u00f3digo: \u00bfcompilaci\u00f3n o interpretaci\u00f3n?"},{"location":"Herramientas%20de%20desarrollo/#3-para-cada-uno-de-los-lenguajes-anteriores-indica-el-nombre-del-compilador-o-interprete-utilizado-en-gnulinux","text":"bash: Shell python: CPython php: Netbeans javascript (nodejs): Navegador web c: GCC c++: GCC java: GNU Compiler ruby: JIT go: gccgo rust: Rustc lisp: GCL ensamblador (nasm): GNU Assembler","title":"3) Para cada uno de los lenguajes anteriores, indica el nombre del compilador o interprete utilizado en GNU/Linux."},{"location":"Herramientas%20de%20desarrollo/#4-investiga-y-averigua-que-extension-tienen-los-archivos-de-codigo-fuente-de-los-siguientes-lenguajes","text":"bash: .sh python: .py php: .php javascript (nodejs): .js c: .c c++: .cpp java: .java ruby: .rb go: .go rust: .rs lisp: .lisp ensamblador (nasm): .asm","title":"4) Investiga y averigua que extensi\u00f3n tienen los archivos de c\u00f3digo fuente de los siguientes lenguajes:"},{"location":"Herramientas%20de%20desarrollo/#6-que-extension-tienen-los-archivos-de-codigo-objeto","text":"Tienen la extensi\u00f3n .obj, que son archivos intermedios generados por el compilador.","title":"6) \u00bfQu\u00e9 extensi\u00f3n tienen los archivos de c\u00f3digo objeto?"},{"location":"Herramientas%20de%20desarrollo/#7-lenguaje-c-codigo-en-varios-archivos-obtener-el-codigo-objeto-a-partir-del-codigo-fuente-de-los-3-archivos-siguientes","text":"Escribimos en la consola el comando \"gcc -c main.c datos.c suma.c\" y si despu\u00e9s escribimos el comando \"ls\" para comprobar los archivos, adem\u00e1s de los del enunciado, nos devuelve main.o datos.o y suma.o","title":"7) Lenguaje C. C\u00f3digo en varios archivos. Obtener el c\u00f3digo objeto a partir del c\u00f3digo fuente de los 3 archivos siguientes:"},{"location":"Herramientas%20de%20desarrollo/#8-lenguaje-c-codigo-en-varios-archivos-obtener-el-codigo-binario-ejecutable-a-partir-del-codigo-objeto-de-los-3-archivos-anteriores","text":"Para obtener el c\u00f3digo binario ejecutable usaremos el comando \"gcc -o ejemplo main.o datos.o suma.o\" y nos devuelve un nuevo archivo llamado ejemplo con el c\u00f3digo binario ejecutable.","title":"8) Lenguaje C. C\u00f3digo en varios archivos. Obtener el c\u00f3digo binario ejecutable a partir del c\u00f3digo objeto de los 3 archivos anteriores:"},{"location":"Herramientas%20de%20desarrollo/#bibliotecas","text":"","title":"BIBLIOTECAS"},{"location":"Herramientas%20de%20desarrollo/#11-bibliotecas-define-que-se-entiende-por-biblioteca-o-libreria-y-los-tipos-que-existen","text":"Es un conjunto de implementaciones funcionales codificadas en un lenguaje de programaci\u00f3n. Existen los siguientes tipos: - Bibliotecas est\u00e1ticas - Bibliotecas din\u00e1micas - Bibliotecas remotas","title":"11) Bibliotecas. Define que se entiende por biblioteca o librer\u00eda y los tipos que existen."},{"location":"Herramientas%20de%20desarrollo/#12-bibliotecas-que-tipo-es-el-mas-utilizado-actualmente-por-que","text":"Las bibliotecas din\u00e1micas porque la carga din\u00e1mica permite al sistema operativo aplicar algoritmos que mejoren el rendimiento del sistema cuando se carguen estas bibliotecas. Adem\u00e1s, al estar compartidas, basta con mantener una copia en memoria para todos los programas que la utilicen. En resumen, facilitan la gesti\u00f3n y el aprovechamiento de la memoria del sistema.","title":"12) Bibliotecas. \u00bfQu\u00e9 tipo es el m\u00e1s utilizado actualmente? \u00bfPor qu\u00e9?"},{"location":"Kanban%2C%20Scrum%20y%20XP/","text":"KANBAN, SCRUM Y XP 1) KANBAN. Haz un resumen de la metodolog\u00eda Kanban e indica sus diferencias frente a SCRUM. Es un m\u00e9todo de gesti\u00f3n de proyectos visual que ordena las tareas en tarjetas en el llamado tablero Kanban. Ayuda el flujo de trabajo con la entrega continua Sus diferencias con Scrum son: La cadencia, ya que Scrum es de longitud fija y en Kanban es continuo y m\u00e1s fluido, y los cambios, en Kanban se espera el cambio en cualquier momento mientras en Scrum se evita cambios repentinos. 2) SCRUM. Explica como funciona Scrum. Scrum se basa en Sprints (o iteraciones) cortos y estructurados con el cliente, y reuniones cara a cara diarias con el equipo de trabajo. Despu\u00e9s se realizaran revisiones para comprobar que se desarrolla en condiciones. 3) SCRUM. Define los siguientes t\u00e9rminos Sprint Backlog: Lista de tareas identificadas por el scrum team. Product backlog: Es un listado de todas las tareas que se pretenden realizar durante el desarrollo de un proyecto con el objetivo de que sean visibles para todo el equipo. 4) SCRUM. Haz un resumen de los requisitos para poder utilizar Scrum. Cultura de empresa, compromiso del cliente, compromiso de la direcci\u00f3n, compromiso conjunto y colaboraci\u00f3n de los miembros del equipo, relaci\u00f3n entre proveedor y cliente, facilidad para realizar cambios, tama\u00f1o de cada equipo, dedicaci\u00f3n del equipo a tiempo completo, estabilidad de los miembros del equipo. 5) XP. Explica los 5 valores de la Programaci\u00f3n Extrema. Comunicaci\u00f3n: La comunicaci\u00f3n entre programadores es importante para romper las barreras entre negocio y desarrollo. Simplicidad: Los programas deben ser los m\u00e1s sencillos posibles y tener la funcionalidad necesaria que se indican en los requisitos. Retroalimentaci\u00f3n: Las pruebas que se le realizan para determinar c\u00f3mo va el desarrollo del proyecto. Valent\u00eda o coraje: Asumir retos para salir de nuestra zona de confort. Respeto o humildad: Importante en todas direcciones, tanto al trabajo de los dem\u00e1s como al de uno mismo. 6) XP. \u00bfCu\u00e1les son las caracter\u00edsticas distintivas de XP frente a otras metodolog\u00edas \u00e1giles? Expl\u00edcalas Favorece a la eficacia y sencillez, con el trabajo en equipo por parejas, y es una metodolog\u00eda \u00e1gil que se debe adaptar a nosotros, no nosotros adaptarnos a ella.","title":"Kanban, Scrum y XP"},{"location":"Kanban%2C%20Scrum%20y%20XP/#kanban-scrum-y-xp","text":"","title":"KANBAN, SCRUM Y XP"},{"location":"Kanban%2C%20Scrum%20y%20XP/#1-kanban-haz-un-resumen-de-la-metodologia-kanban-e-indica-sus-diferencias-frente-a-scrum","text":"Es un m\u00e9todo de gesti\u00f3n de proyectos visual que ordena las tareas en tarjetas en el llamado tablero Kanban. Ayuda el flujo de trabajo con la entrega continua Sus diferencias con Scrum son: La cadencia, ya que Scrum es de longitud fija y en Kanban es continuo y m\u00e1s fluido, y los cambios, en Kanban se espera el cambio en cualquier momento mientras en Scrum se evita cambios repentinos.","title":"1) KANBAN. Haz un resumen de la metodolog\u00eda Kanban e indica sus diferencias frente a SCRUM."},{"location":"Kanban%2C%20Scrum%20y%20XP/#2-scrum-explica-como-funciona-scrum","text":"Scrum se basa en Sprints (o iteraciones) cortos y estructurados con el cliente, y reuniones cara a cara diarias con el equipo de trabajo. Despu\u00e9s se realizaran revisiones para comprobar que se desarrolla en condiciones.","title":"2) SCRUM. Explica como funciona Scrum."},{"location":"Kanban%2C%20Scrum%20y%20XP/#3-scrum-define-los-siguientes-terminos","text":"Sprint Backlog: Lista de tareas identificadas por el scrum team. Product backlog: Es un listado de todas las tareas que se pretenden realizar durante el desarrollo de un proyecto con el objetivo de que sean visibles para todo el equipo.","title":"3) SCRUM. Define los siguientes t\u00e9rminos"},{"location":"Kanban%2C%20Scrum%20y%20XP/#4-scrum-haz-un-resumen-de-los-requisitos-para-poder-utilizar-scrum","text":"Cultura de empresa, compromiso del cliente, compromiso de la direcci\u00f3n, compromiso conjunto y colaboraci\u00f3n de los miembros del equipo, relaci\u00f3n entre proveedor y cliente, facilidad para realizar cambios, tama\u00f1o de cada equipo, dedicaci\u00f3n del equipo a tiempo completo, estabilidad de los miembros del equipo.","title":"4) SCRUM. Haz un resumen de los requisitos para poder utilizar Scrum."},{"location":"Kanban%2C%20Scrum%20y%20XP/#5-xp-explica-los-5-valores-de-la-programacion-extrema","text":"Comunicaci\u00f3n: La comunicaci\u00f3n entre programadores es importante para romper las barreras entre negocio y desarrollo. Simplicidad: Los programas deben ser los m\u00e1s sencillos posibles y tener la funcionalidad necesaria que se indican en los requisitos. Retroalimentaci\u00f3n: Las pruebas que se le realizan para determinar c\u00f3mo va el desarrollo del proyecto. Valent\u00eda o coraje: Asumir retos para salir de nuestra zona de confort. Respeto o humildad: Importante en todas direcciones, tanto al trabajo de los dem\u00e1s como al de uno mismo.","title":"5) XP. Explica los 5 valores de la Programaci\u00f3n Extrema."},{"location":"Kanban%2C%20Scrum%20y%20XP/#6-xp-cuales-son-las-caracteristicas-distintivas-de-xp-frente-a-otras-metodologias-agiles-explicalas","text":"Favorece a la eficacia y sencillez, con el trabajo en equipo por parejas, y es una metodolog\u00eda \u00e1gil que se debe adaptar a nosotros, no nosotros adaptarnos a ella.","title":"6) XP. \u00bfCu\u00e1les son las caracter\u00edsticas distintivas de XP frente a otras metodolog\u00edas \u00e1giles? Expl\u00edcalas"},{"location":"Lenguajes%20de%20programaci%C3%B3n/","text":"Lenguajes de programaci\u00f3n 1) \u00bfQu\u00e9 diferencia existe entre los lenguajes declarativos y los imperativos?. Nombra al menos 2 de cada tipo. Los lenguajes imperativos se centran en qu\u00e9 pasos hay que dar para lograr el objetivo. Ejemplo: PHP y JavaScript. Mientras que en los lenguajes declarativos se enfocan en el resultado deseado y no en c\u00f3mo lograrlo. Ejemplo: SQL, Prolog. 2) \u00bfExplica qu\u00e9 es compilar? \u00bfExplica qu\u00e9 es interpretar? Compilar es el proceso de transformar un programa inform\u00e1tico escrito en un lenguaje en un programa equivalente en otro formato o lenguaje. Interpretar es procesar el c\u00f3digo fuente de un proyecto sin una previa compilaci\u00f3n del programa a instrucciones en lenguaje m\u00e1quina. 3) Ventajas de los lenguajes compilados. Un programa escrito en un lenguaje compilado posee la ventaja de no necesitar un programa anexo para ser ejecutado una vez que ha sido compilado. Adem\u00e1s, como s\u00f3lo es necesaria una traducci\u00f3n, la ejecuci\u00f3n se vuelve m\u00e1s r\u00e1pida. 4) Ventajas de los lenguajes interpretados. Multiplataforma: Puede estar en varios sistemas por lo que no tiene que adaptarse a una plataforma en concreto. Portabilidad: El programa puede llevarse a diferentes plataformas. Aumento del rendimiento: Algunos lenguajes interpretados, se ejecutan en el navegador cliente, lo que hace disminuir la carga de trabajo del servidor web. 5) Nombra 2 lenguajes compilados y otros 2 interpretados. Compilado: C, C++. Interpretado: PHP, JavaScript. 6) \u00bfPuede considerarse c\u00f3digo objeto el bytecode generado en Java tras la compilaci\u00f3n? Explica la respuesta. Si, porque el c\u00f3digo fuente Java se compila y se obtiene un c\u00f3digo binario intermedio denominado bytecode. Este puede considerarse c\u00f3digo objeto pero destinado a la m\u00e1quina virtual de Java en lugar de c\u00f3digo objeto nativo. 7) Pon un ejemplo de lenguaje de los siguientes tipos: Bajo nivel: ensamblador. Nivel medio: C. Alto nivel: Java. 8) \u00bfQu\u00e9 paradigma de programaci\u00f3n siguen los siguientes lenguajes? C > Imperativa, estructurado C++ > Imperativa, multiparadigma SQL > Declarativa, algebraico Java > Imperativa, orientado a objetos Javascript > Imperativa, multiparadigma Lisp > Declarativa, funcional Prolog > Declarativa, l\u00f3gico 9) Explica qu\u00e9 criterios pueden seguirse a la hora de elegir un lenguaje de programaci\u00f3n para el desarrollo software. Campo de aplicaci\u00f3n Experiencia previa Herramientas de desarrollo Documentaci\u00f3n disponible Base de usuarios Reusabilidad Transportabilidad Imposici\u00f3n del cliente","title":"Lenguajes de programaci\u00f3n"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#lenguajes-de-programacion","text":"","title":"Lenguajes de programaci\u00f3n"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#1-que-diferencia-existe-entre-los-lenguajes-declarativos-y-los-imperativos-nombra-al-menos-2-de-cada-tipo","text":"Los lenguajes imperativos se centran en qu\u00e9 pasos hay que dar para lograr el objetivo. Ejemplo: PHP y JavaScript. Mientras que en los lenguajes declarativos se enfocan en el resultado deseado y no en c\u00f3mo lograrlo. Ejemplo: SQL, Prolog.","title":"1) \u00bfQu\u00e9 diferencia existe entre los lenguajes declarativos y los imperativos?. Nombra al menos 2 de cada tipo."},{"location":"Lenguajes%20de%20programaci%C3%B3n/#2-explica-que-es-compilar-explica-que-es-interpretar","text":"Compilar es el proceso de transformar un programa inform\u00e1tico escrito en un lenguaje en un programa equivalente en otro formato o lenguaje. Interpretar es procesar el c\u00f3digo fuente de un proyecto sin una previa compilaci\u00f3n del programa a instrucciones en lenguaje m\u00e1quina.","title":"2) \u00bfExplica qu\u00e9 es compilar? \u00bfExplica qu\u00e9 es interpretar?"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#3-ventajas-de-los-lenguajes-compilados","text":"Un programa escrito en un lenguaje compilado posee la ventaja de no necesitar un programa anexo para ser ejecutado una vez que ha sido compilado. Adem\u00e1s, como s\u00f3lo es necesaria una traducci\u00f3n, la ejecuci\u00f3n se vuelve m\u00e1s r\u00e1pida.","title":"3) Ventajas de los lenguajes compilados."},{"location":"Lenguajes%20de%20programaci%C3%B3n/#4-ventajas-de-los-lenguajes-interpretados","text":"Multiplataforma: Puede estar en varios sistemas por lo que no tiene que adaptarse a una plataforma en concreto. Portabilidad: El programa puede llevarse a diferentes plataformas. Aumento del rendimiento: Algunos lenguajes interpretados, se ejecutan en el navegador cliente, lo que hace disminuir la carga de trabajo del servidor web.","title":"4) Ventajas de los lenguajes interpretados."},{"location":"Lenguajes%20de%20programaci%C3%B3n/#5-nombra-2-lenguajes-compilados-y-otros-2-interpretados","text":"Compilado: C, C++. Interpretado: PHP, JavaScript.","title":"5) Nombra 2 lenguajes compilados y otros 2 interpretados."},{"location":"Lenguajes%20de%20programaci%C3%B3n/#6-puede-considerarse-codigo-objeto-el-bytecode-generado-en-java-tras-la-compilacion-explica-la-respuesta","text":"Si, porque el c\u00f3digo fuente Java se compila y se obtiene un c\u00f3digo binario intermedio denominado bytecode. Este puede considerarse c\u00f3digo objeto pero destinado a la m\u00e1quina virtual de Java en lugar de c\u00f3digo objeto nativo.","title":"6) \u00bfPuede considerarse c\u00f3digo objeto el bytecode generado en Java tras la compilaci\u00f3n? Explica la respuesta."},{"location":"Lenguajes%20de%20programaci%C3%B3n/#7-pon-un-ejemplo-de-lenguaje-de-los-siguientes-tipos","text":"Bajo nivel: ensamblador. Nivel medio: C. Alto nivel: Java.","title":"7) Pon un ejemplo de lenguaje de los siguientes tipos:"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#8-que-paradigma-de-programacion-siguen-los-siguientes-lenguajes","text":"C > Imperativa, estructurado C++ > Imperativa, multiparadigma SQL > Declarativa, algebraico Java > Imperativa, orientado a objetos Javascript > Imperativa, multiparadigma Lisp > Declarativa, funcional Prolog > Declarativa, l\u00f3gico","title":"8) \u00bfQu\u00e9 paradigma de programaci\u00f3n siguen los siguientes lenguajes?"},{"location":"Lenguajes%20de%20programaci%C3%B3n/#9-explica-que-criterios-pueden-seguirse-a-la-hora-de-elegir-un-lenguaje-de-programacion-para-el-desarrollo-software","text":"Campo de aplicaci\u00f3n Experiencia previa Herramientas de desarrollo Documentaci\u00f3n disponible Base de usuarios Reusabilidad Transportabilidad Imposici\u00f3n del cliente","title":"9) Explica qu\u00e9 criterios pueden seguirse a la hora de elegir un lenguaje de programaci\u00f3n para el desarrollo software."}]}